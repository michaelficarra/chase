/* vim: set filetype=racc : */

class FirstOrderLogic

prechigh
	nonassoc NOT
	left AND
	left OR
	right IMPLIES
preclow

token OR AND NOT
token BRACKET_OPEN BRACKET_CLOSE PAREN_OPEN PAREN_CLOSE
token TAUTOLOGY CONTRADICTION
token FOR_ALL THERE_EXISTS
token COLON COMMA IMPLIES
token FREE_VARIABLE PREDICATE
token NEWLINE

options no_result_var

start program

rule

program
	: /* nothing */                         { "" }
	| formulaList optNEWLINE                { val.first.join("\n") } #{ Program.new *val.first; }
	;

formulaList
	: formula                               { val }
	| formulaList NEWLINE formula           { val.first.push val.last }
	;

formula
	: expr
	| expr IMPLIES expr                         { val.first + ' â†’ ' + val.last } #{ Implication.new val.first val.last }
	| FOR_ALL argList quantifierBody            { val.first+' '+val[1].join(',')+val.last } #{ UniversalQuantifier.new val[1], val.last }
	| THERE_EXISTS argList quantifierBody       { val.first+' '+val[1].join(',')+val.last } #{ ExistentialQuantifier.new val[1], val.last }
	;

expr: exprOR ;

exprOR
	: exprAND
	| exprOR OR exprAND                     { val.join(' ') } #{ Expression.new val[1], val.first, val.last }
	;

exprAND
	: exprValue
	| exprAND AND exprValue                 { '('+val.join(' ')+')' } #{ Expression.new val[1], val.first, val.last }
	;

exprValue
	: atomic
	| PAREN_OPEN formula PAREN_CLOSE        { '('+val[1]+')' } #{ ParentheticalExpresson.new val[1] }
	| BRACKET_OPEN formula BRACKET_CLOSE    { '['+val[1]+']' } #{ ParentheticalExpresson.new val[1] }
	| TAUTOLOGY                             { val.last } #{ Tautology.new }
	| CONTRADICTION                         { val.last } #{ Contradiction.new }
	| NOT exprValue                         { val.first+val.last } #{ val.last.not!; val.last }
	;

quantifierBody: optCOLON formula            { ': '+val.last } ;

atomic: PREDICATE index                     { val.first+val.last } #{ Predicate.new val.first, val[2] } ;

index
	: PAREN_OPEN argList PAREN_CLOSE        { '('+val[1].join(',')+')' }
	| BRACKET_OPEN argList BRACKET_CLOSE    { '['+val[1].join(',')+']' }
	;

argList
	: arg                                   { val }
	| argList COMMA arg                     { val.first.push val.last }
	;

arg: FREE_VARIABLE ;

optCOLON:   /* nothing */ { false } | COLON   { val.first } ;
optNEWLINE: /* nothing */ { false } | NEWLINE { val.first } ;

end

---- header
	require 'first-order-logic.rex.rb'
	Dir['nodes/**.rb'].each { |node| require node }

---- inner
	const = 0
	def self.operators; @@operators; end
	@@operators = {
		:AND => const=const.next,
		:XOR => const=const.next,
		:OR => const=const.next,
	}

	def parse_file file
		load_file file
		do_parse
	end

---- footer
	if __FILE__ == $0
		puts File.read(ARGV[0])
		program = FirstOrderLogic.new.parse_file(ARGV[0])
		puts '---------------------'
		puts program.to_s
	end
